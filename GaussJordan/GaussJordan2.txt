int n = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el nÃºmero de ecuaciones: "));
        double[][] matriz = new double[n][n + 1];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n + 1; j++) {
                matriz[i][j] = Double.parseDouble(JOptionPane.showInputDialog("Ingrese el coeficiente " + (j + 1) + " de la ecuaciÃ³n " + (i + 1) + ":"));
            }
        }
        
        double[] solucion = resolverSistema(matriz);
        
        StringBuilder mensaje = new StringBuilder("SoluciÃ³n:\n");
        for (int i = 0; i < solucion.length; i++) {
            mensaje.append("x").append(i + 1).append(" = ").append(solucion[i]).append("\n");
        }
        
        JOptionPane.showMessageDialog(null, mensaje.toString());
    }

    public static double[] resolverSistema(double[][] matriz) {
        int n = matriz.length;

        for (int i = 0; i < n; i++) {
            // Hacer que el pivote sea 1
            double pivote = matriz[i][i];
            for (int j = i; j < n + 1; j++) {
                matriz[i][j] /= pivote;
            }

            // Hacer 0 en los otros elementos de la columna del pivote
            for (int k = 0; k < n; k++) {
                if (k != i) {
                    double factor = matriz[k][i];
                    for (int j = i; j < n + 1; j++) {
                        matriz[k][j] -= factor * matriz[i][j];
                    }
                }
            }
        }

        // Extraer la soluciÃ³n
        double[] solucion = new double[n];
        for (int i = 0; i < n; i++) {
            solucion[i] = matriz[i][n];
        }

        return solucion;
    }